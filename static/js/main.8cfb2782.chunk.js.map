{"version":3,"sources":["components/PhoneForm/PhoneForm.js","components/FindContact/FindContact.js","components/App/App.js","index.js"],"names":["PhoneForm","submitForm","name","contactName","number","contactNumber","useState","result","setResult","useEffect","CSSTransition","in","classNames","timeout","mountOnEnter","className","onSubmit","type","value","onChange","FindContact","filtered","filterValue","deleteContact","length","TransitionGroup","component","map","item","key","id","onClick","App","state","contacts","filter","e","setState","target","getFilteredContacts","toLowerCase","includes","prev","contact","preventDefault","find","toggle","object","uuidv4","status","writedContacts","localStorage","getItem","this","JSON","parse","prevProps","PrevState","setItem","stringify","unmountOnExit","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8cfb2782.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { CSSTransition } from \"react-transition-group\";\nimport \"./PhoneForm.css\";\n\nconst PhoneForm = ({\n  submitForm,\n  name,\n  contactName,\n  number,\n  contactNumber,\n}) => {\n  const [result, setResult] = useState(false);\n\n  useEffect(() => {\n    setResult(true);\n  }, []);\n\n  return (\n    <>\n      <CSSTransition in={result} classNames=\"title\" timeout={500} mountOnEnter>\n        <h2 className=\"title\">Phonebook</h2>\n      </CSSTransition>\n\n      <form className=\"form\" onSubmit={submitForm}>\n        <span>Name</span>\n        <br></br>\n        <input\n          className=\"input_name\"\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={contactName}\n        ></input>\n        <br></br>\n        <span>Number</span>\n        <br></br>\n        <input\n          className=\"input_number\"\n          type=\"text\"\n          name=\"number\"\n          value={number}\n          onChange={contactNumber}\n        ></input>\n        <br></br>\n        <button className=\"submit_btn\" type=\"submit\">\n          Add contact\n        </button>\n      </form>\n    </>\n  );\n};\n\nexport default PhoneForm;\n\nPhoneForm.propTypes = {\n  submitForm: PropTypes.func.isRequired,\n  name: PropTypes.string.isRequired,\n  contactName: PropTypes.func.isRequired,\n  number: PropTypes.string.isRequired,\n  contactNumber: PropTypes.func.isRequired,\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\nimport \"../FindContact/FindContact.css\";\n\nconst FindContact = ({ filtered, filterValue, deleteContact }) => {\n  return (\n    <>\n      {filtered.length > 1 && (\n        <div className=\"search-container\">\n          {/* <h3>Contacts</h3> */}\n          <span>Find contacts by name</span>\n          <br></br>\n          <input type=\"text\" onChange={filterValue}></input>\n        </div>\n      )}\n      <div className=\"search_info\">\n        <TransitionGroup component=\"ul\" className=\"contact_list\">\n          {filtered.map((item) => (\n            <CSSTransition key={item.id} classNames=\"list__item\" timeout={800}>\n              <li className=\"contact_item\" key={item.id}>\n                {item.name} : {item.number}\n                <button\n                  className=\"delete_btn\"\n                  type=\"button\"\n                  id={item.id}\n                  onClick={deleteContact}\n                >\n                  Delete\n                </button>\n              </li>\n            </CSSTransition>\n          ))}\n        </TransitionGroup>\n      </div>\n    </>\n  );\n};\n\nexport default FindContact;\n\nFindContact.propTypes = {\n  filtered: PropTypes.array.isRequired,\n  filterValue: PropTypes.func.isRequired,\n  deleteContact: PropTypes.func.isRequired,\n};\n","import React, { Component } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport PfoneForm from \"../PhoneForm/PhoneForm\";\nimport FindContact from \"../FindContact/FindContact\";\nimport { CSSTransition } from \"react-transition-group\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    contacts: [],\n    filter: \"\",\n    name: \"\",\n    number: \"\",\n    value: false,\n  };\n\n  contactName = (e) => {\n    this.setState({\n      name: e.target.value,\n    });\n  };\n\n  contactNumber = (e) => {\n    this.setState({\n      number: e.target.value,\n    });\n  };\n\n  filterValue = (e) => {\n    this.setState({ filter: e.target.value });\n  };\n\n  getFilteredContacts = () => {\n    const { contacts, filter } = this.state;\n    return contacts.filter((item) =>\n      item.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  };\n\n  deleteContact = (e) => {\n    const id = e.target.id;\n    this.setState((prev) => ({\n      contacts: prev.contacts.filter((contact) => contact.id !== id),\n    }));\n  };\n\n  submitForm = (e) => {\n    e.preventDefault();\n    const { name, number, contacts, value } = this.state;\n    if (contacts.find((item) => item.name === this.state.name)) {\n      this.toggle(value);\n      return;\n    }\n    const object = {\n      name: name,\n      number: number,\n      id: uuidv4(),\n    };\n    this.setState((prev) => ({\n      contacts: [...prev.contacts, object],\n      filter: \"\",\n      name: \"\",\n      number: \"\",\n    }));\n  };\n\n  componentDidMount() {\n    const writedContacts = localStorage.getItem(\"contacts\");\n    if (writedContacts) {\n      this.setState({\n        contacts: JSON.parse(writedContacts),\n      });\n    }\n  }\n\n  componentDidUpdate(prevProps, PrevState) {\n    if (PrevState.contacts !== this.state.contacts) {\n      localStorage.setItem(\"contacts\", JSON.stringify(this.state.contacts));\n    }\n  }\n\n  toggle = (status) => {\n    this.setState({\n      value: !status,\n    });\n  };\n\n  render() {\n    const filtered = this.getFilteredContacts();\n    const { name, number, value } = this.state;\n    const test = () => {\n      this.toggle(true);\n    };\n\n    return (\n      <>\n        <CSSTransition\n          in={value}\n          classNames=\"alert\"\n          timeout={500}\n          mountOnEnter\n          unmountOnExit\n        >\n          <button\n            className=\"alert\"\n            onClick={test}\n          >{`${name} alredy exist`}</button>\n        </CSSTransition>\n\n        <PfoneForm\n          submitForm={this.submitForm}\n          name={name}\n          contactName={this.contactName}\n          number={number}\n          contactNumber={this.contactNumber}\n        />\n        <FindContact\n          filtered={filtered}\n          filterValue={this.filterValue}\n          deleteContact={this.deleteContact}\n        />\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App/App\";\n\nReactDOM.render(\n  <>\n    <App />\n  </>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}